# -*- coding: utf-8 -*-
"""Untitled15.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VZWVMhEWLLae93XUYdCZk-fWmtkHSPKi
"""

import pandas as pd
import numpy as np
import joblib
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score

# Load training and test data
train_url = "https://github.com/dustywhite7/Econ8310/raw/master/AssignmentData/assignment3.csv"
test_url = "https://github.com/dustywhite7/Econ8310/raw/master/AssignmentData/assignment3test.csv"
df = pd.read_csv(train_url)
test_df = pd.read_csv(test_url)

# Drop non-essential columns
df = df.drop(columns=[col for col in ['id', 'DateTime'] if col in df.columns])
test_df = test_df.drop(columns=[col for col in ['id', 'DateTime'] if col in test_df.columns])

# One-hot encode categorical variables
categorical_cols = df.select_dtypes(include=['object']).columns
df = pd.get_dummies(df, columns=categorical_cols, drop_first=True)
test_df = pd.get_dummies(test_df, columns=categorical_cols, drop_first=True)

# Align test data with training data
X = df.drop(columns=["meal"])  # Features
y = df["meal"].astype(int)  # Ensure target is integer
X_test = test_df.drop(columns=["meal"], errors='ignore')
X_test = X_test.reindex(columns=X.columns, fill_value=0)

# Split training data for evaluation
X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, random_state=42)

# Train the Decision Tree model
model = DecisionTreeClassifier(random_state=42)
model.fit(X_train, y_train)

# Evaluate model performance
train_accuracy = accuracy_score(y_train, model.predict(X_train))
val_accuracy = accuracy_score(y_val, model.predict(X_val))
print(f"DecisionTree Training Accuracy: {train_accuracy:.4f}")
print(f"DecisionTree Validation Accuracy: {val_accuracy:.4f}")

# Save the trained model
joblib.dump(model, "model.pkl")
modelFit = model  # Ensure this is the model that needs to be returned

# Make predictions on the test data
pred = model.predict(X_test)
pred = np.clip(pred, 0, 1)  # Force predictions to be 0 or 1

# Convert predictions to a list of integers
pred = pred.astype(int).tolist()

# Validation checks for predictions
assert len(pred) == 1000, "Error: Predictions must contain exactly 1000 values!"
assert all(isinstance(i, int) for i in pred), "Error: Predictions must be integers!"
assert set(pred).issubset({0, 1}), "Error: Predictions should only contain 0s and 1s!"

print(" Model training complete. Predictions are stored in the 'pred' variable.")

# Check if the model is properly fitted
if hasattr(modelFit, 'tree_'):
    print(" Model is fitted (tree structure exists).")
else:
    raise AssertionError(" Error: Model does not appear to be fitted correctly!")